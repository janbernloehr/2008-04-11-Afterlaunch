'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18408
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Imports System.Runtime.Serialization


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="KnowledgeCenter")>  _
Partial Public Class KnowledgeCenterDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertArticleCategoryMapping(instance As ArticleCategoryMapping)
    End Sub
  Partial Private Sub UpdateArticleCategoryMapping(instance As ArticleCategoryMapping)
    End Sub
  Partial Private Sub DeleteArticleCategoryMapping(instance As ArticleCategoryMapping)
    End Sub
  Partial Private Sub InsertArticleRating(instance As ArticleRating)
    End Sub
  Partial Private Sub UpdateArticleRating(instance As ArticleRating)
    End Sub
  Partial Private Sub DeleteArticleRating(instance As ArticleRating)
    End Sub
  Partial Private Sub InsertArticle(instance As Article)
    End Sub
  Partial Private Sub UpdateArticle(instance As Article)
    End Sub
  Partial Private Sub DeleteArticle(instance As Article)
    End Sub
  Partial Private Sub InsertArticleTagMapping(instance As ArticleTagMapping)
    End Sub
  Partial Private Sub UpdateArticleTagMapping(instance As ArticleTagMapping)
    End Sub
  Partial Private Sub DeleteArticleTagMapping(instance As ArticleTagMapping)
    End Sub
  Partial Private Sub InsertComment(instance As Comment)
    End Sub
  Partial Private Sub UpdateComment(instance As Comment)
    End Sub
  Partial Private Sub DeleteComment(instance As Comment)
    End Sub
  Partial Private Sub InsertTag(instance As Tag)
    End Sub
  Partial Private Sub UpdateTag(instance As Tag)
    End Sub
  Partial Private Sub DeleteTag(instance As Tag)
    End Sub
  Partial Private Sub InsertRelatedArticle(instance As RelatedArticle)
    End Sub
  Partial Private Sub UpdateRelatedArticle(instance As RelatedArticle)
    End Sub
  Partial Private Sub DeleteRelatedArticle(instance As RelatedArticle)
    End Sub
  Partial Private Sub InsertAsset(instance As Asset)
    End Sub
  Partial Private Sub UpdateAsset(instance As Asset)
    End Sub
  Partial Private Sub DeleteAsset(instance As Asset)
    End Sub
  Partial Private Sub InsertCategory(instance As Category)
    End Sub
  Partial Private Sub UpdateCategory(instance As Category)
    End Sub
  Partial Private Sub DeleteCategory(instance As Category)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.KnowledgeCenter.DataAccess.My.MySettings.Default.KnowledgeCenterConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ArticleCategoryMappings() As System.Data.Linq.Table(Of ArticleCategoryMapping)
		Get
			Return Me.GetTable(Of ArticleCategoryMapping)
		End Get
	End Property
	
	Public ReadOnly Property ArticleRatings() As System.Data.Linq.Table(Of ArticleRating)
		Get
			Return Me.GetTable(Of ArticleRating)
		End Get
	End Property
	
	Public ReadOnly Property Articles() As System.Data.Linq.Table(Of Article)
		Get
			Return Me.GetTable(Of Article)
		End Get
	End Property
	
	Public ReadOnly Property ArticleTagMappings() As System.Data.Linq.Table(Of ArticleTagMapping)
		Get
			Return Me.GetTable(Of ArticleTagMapping)
		End Get
	End Property
	
	Public ReadOnly Property Comments() As System.Data.Linq.Table(Of Comment)
		Get
			Return Me.GetTable(Of Comment)
		End Get
	End Property
	
	Public ReadOnly Property Tags() As System.Data.Linq.Table(Of Tag)
		Get
			Return Me.GetTable(Of Tag)
		End Get
	End Property
	
	Public ReadOnly Property RelatedArticles() As System.Data.Linq.Table(Of RelatedArticle)
		Get
			Return Me.GetTable(Of RelatedArticle)
		End Get
	End Property
	
	Public ReadOnly Property Assets() As System.Data.Linq.Table(Of Asset)
		Get
			Return Me.GetTable(Of Asset)
		End Get
	End Property
	
	Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
		Get
			Return Me.GetTable(Of Category)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.IncreaseArticlesViewsByArticleId")>  _
	Public Function IncreaseArticlesViewsByArticleId(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ArticleId", DbType:="Int")> ByVal articleId As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), articleId)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ArticleCategoryMappings"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ArticleCategoryMapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ArticleId As Integer
	
	Private _CategoryId As Integer
	
	Private _Article As EntityRef(Of Article)
	
	Private _Category As EntityRef(Of Category)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIdChanged()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleId", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ArticleId() As Integer
		Get
			Return Me._ArticleId
		End Get
		Set
			If ((Me._ArticleId = value)  _
						= false) Then
				If Me._Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIdChanging(value)
				Me.SendPropertyChanging
				Me._ArticleId = value
				Me.SendPropertyChanged("ArticleId")
				Me.OnArticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property CategoryId() As Integer
		Get
			Return Me._CategoryId
		End Get
		Set
			If ((Me._CategoryId = value)  _
						= false) Then
				If Me._Category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleCategoryMapping", Storage:="_Article", ThisKey:="ArticleId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Article() As Article
		Get
			Return Me._Article.Entity
		End Get
		Set
			Dim previousValue As Article = Me._Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Article.Entity = Nothing
					previousValue.ArticleCategoryMappings.Remove(Me)
				End If
				Me._Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleCategoryMappings.Add(Me)
					Me._ArticleId = value.Id
				Else
					Me._ArticleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Article")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_ArticleCategoryMapping", Storage:="_Category", ThisKey:="CategoryId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Category() As Category
		Get
			Return Me._Category.Entity
		End Get
		Set
			Dim previousValue As Category = Me._Category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Category.Entity = Nothing
					previousValue.ArticleCategoryMappings.Remove(Me)
				End If
				Me._Category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleCategoryMappings.Add(Me)
					Me._CategoryId = value.Id
				Else
					Me._CategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Category")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Article = CType(Nothing, EntityRef(Of Article))
		Me._Category = CType(Nothing, EntityRef(Of Category))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ArticleRatings"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ArticleRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ArticleId As Integer
	
	Private _Rating As Integer
	
	Private _Username As String
	
	Private _Article As EntityRef(Of Article)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIdChanged()
    End Sub
    Partial Private Sub OnRatingChanging(value As Integer)
    End Sub
    Partial Private Sub OnRatingChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleId", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ArticleId() As Integer
		Get
			Return Me._ArticleId
		End Get
		Set
			If ((Me._ArticleId = value)  _
						= false) Then
				If Me._Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIdChanging(value)
				Me.SendPropertyChanging
				Me._ArticleId = value
				Me.SendPropertyChanged("ArticleId")
				Me.OnArticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rating", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Rating() As Integer
		Get
			Return Me._Rating
		End Get
		Set
			If ((Me._Rating = value)  _
						= false) Then
				Me.OnRatingChanging(value)
				Me.SendPropertyChanging
				Me._Rating = value
				Me.SendPropertyChanged("Rating")
				Me.OnRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleRating", Storage:="_Article", ThisKey:="ArticleId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Article() As Article
		Get
			Return Me._Article.Entity
		End Get
		Set
			Dim previousValue As Article = Me._Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Article.Entity = Nothing
					previousValue.ArticleRatings.Remove(Me)
				End If
				Me._Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleRatings.Add(Me)
					Me._ArticleId = value.Id
				Else
					Me._ArticleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Article")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Article = CType(Nothing, EntityRef(Of Article))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Articles"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Article
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Teaser As String
	
	Private _Text As String
	
	Private _Views As Integer
	
	Private _Rating As System.Nullable(Of Double)
	
	Private _AuthorName As String
	
	Private _IsPublished As Boolean
	
	Private _DateCreated As Date
	
	Private _DateEdit As System.Nullable(Of Date)
	
	Private _Level As Integer
	
	Private _FriendlyUrl As String
	
	Private _OldId As String
	
	Private _ArticleCategoryMappings As EntitySet(Of ArticleCategoryMapping)
	
	Private _ArticleRatings As EntitySet(Of ArticleRating)
	
	Private _ArticleTagMappings As EntitySet(Of ArticleTagMapping)
	
	Private _Comments As EntitySet(Of Comment)
	
	Private _RelatedArticleMappings As EntitySet(Of RelatedArticle)
	
	Private _Assets As EntitySet(Of Asset)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnTeaserChanging(value As String)
    End Sub
    Partial Private Sub OnTeaserChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As String)
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    Partial Private Sub OnViewsChanging(value As Integer)
    End Sub
    Partial Private Sub OnViewsChanged()
    End Sub
    Partial Private Sub OnRatingChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRatingChanged()
    End Sub
    Partial Private Sub OnAuthorNameChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorNameChanged()
    End Sub
    Partial Private Sub OnIsPublishedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsPublishedChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateEditChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateEditChanged()
    End Sub
    Partial Private Sub OnLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnLevelChanged()
    End Sub
    Partial Private Sub OnFriendlyUrlChanging(value As String)
    End Sub
    Partial Private Sub OnFriendlyUrlChanged()
    End Sub
    Partial Private Sub OnOldIdChanging(value As String)
    End Sub
    Partial Private Sub OnOldIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teaser", DbType:="NVarChar(2000)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Teaser() As String
		Get
			Return Me._Teaser
		End Get
		Set
			If (String.Equals(Me._Teaser, value) = false) Then
				Me.OnTeaserChanging(value)
				Me.SendPropertyChanging
				Me._Teaser = value
				Me.SendPropertyChanged("Teaser")
				Me.OnTeaserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set
			If (String.Equals(Me._Text, value) = false) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Views", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property Views() As Integer
		Get
			Return Me._Views
		End Get
		Set
			If ((Me._Views = value)  _
						= false) Then
				Me.OnViewsChanging(value)
				Me.SendPropertyChanging
				Me._Views = value
				Me.SendPropertyChanged("Views")
				Me.OnViewsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rating", DbType:="Float"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property Rating() As System.Nullable(Of Double)
		Get
			Return Me._Rating
		End Get
		Set
			If (Me._Rating.Equals(value) = false) Then
				Me.OnRatingChanging(value)
				Me.SendPropertyChanging
				Me._Rating = value
				Me.SendPropertyChanged("Rating")
				Me.OnRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property AuthorName() As String
		Get
			Return Me._AuthorName
		End Get
		Set
			If (String.Equals(Me._AuthorName, value) = false) Then
				Me.OnAuthorNameChanging(value)
				Me.SendPropertyChanging
				Me._AuthorName = value
				Me.SendPropertyChanged("AuthorName")
				Me.OnAuthorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPublished", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property IsPublished() As Boolean
		Get
			Return Me._IsPublished
		End Get
		Set
			If ((Me._IsPublished = value)  _
						= false) Then
				Me.OnIsPublishedChanging(value)
				Me.SendPropertyChanging
				Me._IsPublished = value
				Me.SendPropertyChanged("IsPublished")
				Me.OnIsPublishedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateEdit", DbType:="DateTime"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property DateEdit() As System.Nullable(Of Date)
		Get
			Return Me._DateEdit
		End Get
		Set
			If (Me._DateEdit.Equals(value) = false) Then
				Me.OnDateEditChanging(value)
				Me.SendPropertyChanging
				Me._DateEdit = value
				Me.SendPropertyChanged("DateEdit")
				Me.OnDateEditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Level]", Storage:="_Level", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11)>  _
	Public Property Level() As Integer
		Get
			Return Me._Level
		End Get
		Set
			If ((Me._Level = value)  _
						= false) Then
				Me.OnLevelChanging(value)
				Me.SendPropertyChanging
				Me._Level = value
				Me.SendPropertyChanged("Level")
				Me.OnLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FriendlyUrl", DbType:="NVarChar(1000)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12)>  _
	Public Property FriendlyUrl() As String
		Get
			Return Me._FriendlyUrl
		End Get
		Set
			If (String.Equals(Me._FriendlyUrl, value) = false) Then
				Me.OnFriendlyUrlChanging(value)
				Me.SendPropertyChanging
				Me._FriendlyUrl = value
				Me.SendPropertyChanged("FriendlyUrl")
				Me.OnFriendlyUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldId", DbType:="NVarChar(256)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=13)>  _
	Public Property OldId() As String
		Get
			Return Me._OldId
		End Get
		Set
			If (String.Equals(Me._OldId, value) = false) Then
				Me.OnOldIdChanging(value)
				Me.SendPropertyChanging
				Me._OldId = value
				Me.SendPropertyChanged("OldId")
				Me.OnOldIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleCategoryMapping", Storage:="_ArticleCategoryMappings", ThisKey:="Id", OtherKey:="ArticleId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=14, EmitDefaultValue:=false)>  _
	Public Property ArticleCategoryMappings() As EntitySet(Of ArticleCategoryMapping)
		Get
			If (Me.serializing  _
						AndAlso (Me._ArticleCategoryMappings.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ArticleCategoryMappings
		End Get
		Set
			Me._ArticleCategoryMappings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleRating", Storage:="_ArticleRatings", ThisKey:="Id", OtherKey:="ArticleId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=15, EmitDefaultValue:=false)>  _
	Public Property ArticleRatings() As EntitySet(Of ArticleRating)
		Get
			If (Me.serializing  _
						AndAlso (Me._ArticleRatings.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ArticleRatings
		End Get
		Set
			Me._ArticleRatings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleTagMapping", Storage:="_ArticleTagMappings", ThisKey:="Id", OtherKey:="ArticleId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=16, EmitDefaultValue:=false)>  _
	Public Property ArticleTagMappings() As EntitySet(Of ArticleTagMapping)
		Get
			If (Me.serializing  _
						AndAlso (Me._ArticleTagMappings.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ArticleTagMappings
		End Get
		Set
			Me._ArticleTagMappings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_Comment", Storage:="_Comments", ThisKey:="Id", OtherKey:="ArticleId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=17, EmitDefaultValue:=false)>  _
	Public Property Comments() As EntitySet(Of Comment)
		Get
			If (Me.serializing  _
						AndAlso (Me._Comments.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Comments
		End Get
		Set
			Me._Comments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_RelatedArticle", Storage:="_RelatedArticleMappings", ThisKey:="Id", OtherKey:="ArticleId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=18, EmitDefaultValue:=false)>  _
	Public Property RelatedArticles() As EntitySet(Of RelatedArticle)
		Get
			If (Me.serializing  _
						AndAlso (Me._RelatedArticleMappings.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._RelatedArticleMappings
		End Get
		Set
			Me._RelatedArticleMappings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_Asset", Storage:="_Assets", ThisKey:="Id", OtherKey:="ArticleId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=19, EmitDefaultValue:=false)>  _
	Public Property Assets() As EntitySet(Of Asset)
		Get
			If (Me.serializing  _
						AndAlso (Me._Assets.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Assets
		End Get
		Set
			Me._Assets.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ArticleCategoryMappings(ByVal entity As ArticleCategoryMapping)
		Me.SendPropertyChanging
		entity.Article = Me
	End Sub
	
	Private Sub detach_ArticleCategoryMappings(ByVal entity As ArticleCategoryMapping)
		Me.SendPropertyChanging
		entity.Article = Nothing
	End Sub
	
	Private Sub attach_ArticleRatings(ByVal entity As ArticleRating)
		Me.SendPropertyChanging
		entity.Article = Me
	End Sub
	
	Private Sub detach_ArticleRatings(ByVal entity As ArticleRating)
		Me.SendPropertyChanging
		entity.Article = Nothing
	End Sub
	
	Private Sub attach_ArticleTagMappings(ByVal entity As ArticleTagMapping)
		Me.SendPropertyChanging
		entity.Article = Me
	End Sub
	
	Private Sub detach_ArticleTagMappings(ByVal entity As ArticleTagMapping)
		Me.SendPropertyChanging
		entity.Article = Nothing
	End Sub
	
	Private Sub attach_Comments(ByVal entity As Comment)
		Me.SendPropertyChanging
		entity.Article = Me
	End Sub
	
	Private Sub detach_Comments(ByVal entity As Comment)
		Me.SendPropertyChanging
		entity.Article = Nothing
	End Sub
	
	Private Sub attach_RelatedArticleMappings(ByVal entity As RelatedArticle)
		Me.SendPropertyChanging
		entity.Article = Me
	End Sub
	
	Private Sub detach_RelatedArticleMappings(ByVal entity As RelatedArticle)
		Me.SendPropertyChanging
		entity.Article = Nothing
	End Sub
	
	Private Sub attach_Assets(ByVal entity As Asset)
		Me.SendPropertyChanging
		entity.Article = Me
	End Sub
	
	Private Sub detach_Assets(ByVal entity As Asset)
		Me.SendPropertyChanging
		entity.Article = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ArticleCategoryMappings = New EntitySet(Of ArticleCategoryMapping)(AddressOf Me.attach_ArticleCategoryMappings, AddressOf Me.detach_ArticleCategoryMappings)
		Me._ArticleRatings = New EntitySet(Of ArticleRating)(AddressOf Me.attach_ArticleRatings, AddressOf Me.detach_ArticleRatings)
		Me._ArticleTagMappings = New EntitySet(Of ArticleTagMapping)(AddressOf Me.attach_ArticleTagMappings, AddressOf Me.detach_ArticleTagMappings)
		Me._Comments = New EntitySet(Of Comment)(AddressOf Me.attach_Comments, AddressOf Me.detach_Comments)
		Me._RelatedArticleMappings = New EntitySet(Of RelatedArticle)(AddressOf Me.attach_RelatedArticleMappings, AddressOf Me.detach_RelatedArticleMappings)
		Me._Assets = New EntitySet(Of Asset)(AddressOf Me.attach_Assets, AddressOf Me.detach_Assets)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ArticleTagMappings"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ArticleTagMapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _TagId As Integer
	
	Private _ArticleId As Integer
	
	Private _Article As EntityRef(Of Article)
	
	Private _Tag As EntityRef(Of Tag)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTagIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTagIdChanged()
    End Sub
    Partial Private Sub OnArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagId", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property TagId() As Integer
		Get
			Return Me._TagId
		End Get
		Set
			If ((Me._TagId = value)  _
						= false) Then
				If Me._Tag.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTagIdChanging(value)
				Me.SendPropertyChanging
				Me._TagId = value
				Me.SendPropertyChanged("TagId")
				Me.OnTagIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleId", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property ArticleId() As Integer
		Get
			Return Me._ArticleId
		End Get
		Set
			If ((Me._ArticleId = value)  _
						= false) Then
				If Me._Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIdChanging(value)
				Me.SendPropertyChanging
				Me._ArticleId = value
				Me.SendPropertyChanged("ArticleId")
				Me.OnArticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleTagMapping", Storage:="_Article", ThisKey:="ArticleId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Article() As Article
		Get
			Return Me._Article.Entity
		End Get
		Set
			Dim previousValue As Article = Me._Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Article.Entity = Nothing
					previousValue.ArticleTagMappings.Remove(Me)
				End If
				Me._Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleTagMappings.Add(Me)
					Me._ArticleId = value.Id
				Else
					Me._ArticleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Article")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_ArticleTagMapping", Storage:="_Tag", ThisKey:="TagId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Tag() As Tag
		Get
			Return Me._Tag.Entity
		End Get
		Set
			Dim previousValue As Tag = Me._Tag.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tag.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tag.Entity = Nothing
					previousValue.ArticleTagMappings.Remove(Me)
				End If
				Me._Tag.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleTagMappings.Add(Me)
					Me._TagId = value.Id
				Else
					Me._TagId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Tag")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Article = CType(Nothing, EntityRef(Of Article))
		Me._Tag = CType(Nothing, EntityRef(Of Tag))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Comments"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Comment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ArticleId As Integer
	
	Private _Text As String
	
	Private _IsApproved As Boolean
	
	Private _DateCreated As Date
	
	Private _AuthorName As String
	
	Private _Article As EntityRef(Of Article)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIdChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As String)
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    Partial Private Sub OnIsApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsApprovedChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnAuthorNameChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleId", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ArticleId() As Integer
		Get
			Return Me._ArticleId
		End Get
		Set
			If ((Me._ArticleId = value)  _
						= false) Then
				If Me._Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIdChanging(value)
				Me.SendPropertyChanging
				Me._ArticleId = value
				Me.SendPropertyChanged("ArticleId")
				Me.OnArticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set
			If (String.Equals(Me._Text, value) = false) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsApproved", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property IsApproved() As Boolean
		Get
			Return Me._IsApproved
		End Get
		Set
			If ((Me._IsApproved = value)  _
						= false) Then
				Me.OnIsApprovedChanging(value)
				Me.SendPropertyChanging
				Me._IsApproved = value
				Me.SendPropertyChanged("IsApproved")
				Me.OnIsApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property AuthorName() As String
		Get
			Return Me._AuthorName
		End Get
		Set
			If (String.Equals(Me._AuthorName, value) = false) Then
				Me.OnAuthorNameChanging(value)
				Me.SendPropertyChanging
				Me._AuthorName = value
				Me.SendPropertyChanged("AuthorName")
				Me.OnAuthorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_Comment", Storage:="_Article", ThisKey:="ArticleId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Article() As Article
		Get
			Return Me._Article.Entity
		End Get
		Set
			Dim previousValue As Article = Me._Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Article.Entity = Nothing
					previousValue.Comments.Remove(Me)
				End If
				Me._Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Comments.Add(Me)
					Me._ArticleId = value.Id
				Else
					Me._ArticleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Article")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Article = CType(Nothing, EntityRef(Of Article))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tags"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Tag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Score As Double
	
	Private _ArticleTagMappings As EntitySet(Of ArticleTagMapping)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnScoreChanging(value As Double)
    End Sub
    Partial Private Sub OnScoreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(2000)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="Float NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property Score() As Double
		Get
			Return Me._Score
		End Get
		Set
			If ((Me._Score = value)  _
						= false) Then
				Me.OnScoreChanging(value)
				Me.SendPropertyChanging
				Me._Score = value
				Me.SendPropertyChanged("Score")
				Me.OnScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_ArticleTagMapping", Storage:="_ArticleTagMappings", ThisKey:="Id", OtherKey:="TagId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property ArticleTagMappings() As EntitySet(Of ArticleTagMapping)
		Get
			If (Me.serializing  _
						AndAlso (Me._ArticleTagMappings.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ArticleTagMappings
		End Get
		Set
			Me._ArticleTagMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ArticleTagMappings(ByVal entity As ArticleTagMapping)
		Me.SendPropertyChanging
		entity.Tag = Me
	End Sub
	
	Private Sub detach_ArticleTagMappings(ByVal entity As ArticleTagMapping)
		Me.SendPropertyChanging
		entity.Tag = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ArticleTagMappings = New EntitySet(Of ArticleTagMapping)(AddressOf Me.attach_ArticleTagMappings, AddressOf Me.detach_ArticleTagMappings)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RelatedArticleMappings"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class RelatedArticle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ArticleId As Integer
	
	Private _Title As String
	
	Private _ArticleUrl As String
	
	Private _Article As EntityRef(Of Article)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnArticleUrlChanging(value As String)
    End Sub
    Partial Private Sub OnArticleUrlChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleId", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ArticleId() As Integer
		Get
			Return Me._ArticleId
		End Get
		Set
			If ((Me._ArticleId = value)  _
						= false) Then
				If Me._Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIdChanging(value)
				Me.SendPropertyChanging
				Me._ArticleId = value
				Me.SendPropertyChanged("ArticleId")
				Me.OnArticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleUrl", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property ArticleUrl() As String
		Get
			Return Me._ArticleUrl
		End Get
		Set
			If (String.Equals(Me._ArticleUrl, value) = false) Then
				Me.OnArticleUrlChanging(value)
				Me.SendPropertyChanging
				Me._ArticleUrl = value
				Me.SendPropertyChanged("ArticleUrl")
				Me.OnArticleUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_RelatedArticle", Storage:="_Article", ThisKey:="ArticleId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Article() As Article
		Get
			Return Me._Article.Entity
		End Get
		Set
			Dim previousValue As Article = Me._Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Article.Entity = Nothing
					previousValue.RelatedArticles.Remove(Me)
				End If
				Me._Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RelatedArticles.Add(Me)
					Me._ArticleId = value.Id
				Else
					Me._ArticleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Article")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Article = CType(Nothing, EntityRef(Of Article))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Assets"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Asset
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As System.Guid
	
	Private _ArticleId As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _NavigateUrl As String
	
	Private _AttachmentType As Integer
	
	Private _IsActivated As Boolean
	
	Private _DateEdit As System.Nullable(Of Date)
	
	Private _ContentType As String
	
	Private _OldId As String
	
	Private _Article As EntityRef(Of Article)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnNavigateUrlChanging(value As String)
    End Sub
    Partial Private Sub OnNavigateUrlChanged()
    End Sub
    Partial Private Sub OnAttachmentTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnAttachmentTypeChanged()
    End Sub
    Partial Private Sub OnIsActivatedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActivatedChanged()
    End Sub
    Partial Private Sub OnDateEditChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateEditChanged()
    End Sub
    Partial Private Sub OnContentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnContentTypeChanged()
    End Sub
    Partial Private Sub OnOldIdChanging(value As String)
    End Sub
    Partial Private Sub OnOldIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Id() As System.Guid
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleId", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ArticleId() As Integer
		Get
			Return Me._ArticleId
		End Get
		Set
			If ((Me._ArticleId = value)  _
						= false) Then
				If Me._Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIdChanging(value)
				Me.SendPropertyChanging
				Me._ArticleId = value
				Me.SendPropertyChanged("ArticleId")
				Me.OnArticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(2000)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NavigateUrl", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property NavigateUrl() As String
		Get
			Return Me._NavigateUrl
		End Get
		Set
			If (String.Equals(Me._NavigateUrl, value) = false) Then
				Me.OnNavigateUrlChanging(value)
				Me.SendPropertyChanging
				Me._NavigateUrl = value
				Me.SendPropertyChanged("NavigateUrl")
				Me.OnNavigateUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AttachmentType", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property AttachmentType() As Integer
		Get
			Return Me._AttachmentType
		End Get
		Set
			If ((Me._AttachmentType = value)  _
						= false) Then
				Me.OnAttachmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._AttachmentType = value
				Me.SendPropertyChanged("AttachmentType")
				Me.OnAttachmentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActivated", DbType:="Bit NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property IsActivated() As Boolean
		Get
			Return Me._IsActivated
		End Get
		Set
			If ((Me._IsActivated = value)  _
						= false) Then
				Me.OnIsActivatedChanging(value)
				Me.SendPropertyChanging
				Me._IsActivated = value
				Me.SendPropertyChanged("IsActivated")
				Me.OnIsActivatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateEdit", DbType:="DateTime"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property DateEdit() As System.Nullable(Of Date)
		Get
			Return Me._DateEdit
		End Get
		Set
			If (Me._DateEdit.Equals(value) = false) Then
				Me.OnDateEditChanging(value)
				Me.SendPropertyChanging
				Me._DateEdit = value
				Me.SendPropertyChanged("DateEdit")
				Me.OnDateEditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContentType", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property ContentType() As String
		Get
			Return Me._ContentType
		End Get
		Set
			If (String.Equals(Me._ContentType, value) = false) Then
				Me.OnContentTypeChanging(value)
				Me.SendPropertyChanging
				Me._ContentType = value
				Me.SendPropertyChanged("ContentType")
				Me.OnContentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldId", DbType:="NVarChar(256)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property OldId() As String
		Get
			Return Me._OldId
		End Get
		Set
			If (String.Equals(Me._OldId, value) = false) Then
				Me.OnOldIdChanging(value)
				Me.SendPropertyChanging
				Me._OldId = value
				Me.SendPropertyChanged("OldId")
				Me.OnOldIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_Asset", Storage:="_Article", ThisKey:="ArticleId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Article() As Article
		Get
			Return Me._Article.Entity
		End Get
		Set
			Dim previousValue As Article = Me._Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Article.Entity = Nothing
					previousValue.Assets.Remove(Me)
				End If
				Me._Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Assets.Add(Me)
					Me._ArticleId = value.Id
				Else
					Me._ArticleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Article")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Article = CType(Nothing, EntityRef(Of Article))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Categories"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ParentId As System.Nullable(Of Integer)
	
	Private _Title As String
	
	Private _FriendlyUrl As String
	
	Private _OldId As String
	
	Private _LongTitle As String
	
	Private _OrderIndex As Integer
	
	Private _ArticleCategoryMappings As EntitySet(Of ArticleCategoryMapping)
	
	Private _Category As EntityRef(Of Category)
	
	Private serializing As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnParentIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFriendlyUrlChanging(value As String)
    End Sub
    Partial Private Sub OnFriendlyUrlChanged()
    End Sub
    Partial Private Sub OnOldIdChanging(value As String)
    End Sub
    Partial Private Sub OnOldIdChanged()
    End Sub
    Partial Private Sub OnLongTitleChanging(value As String)
    End Sub
    Partial Private Sub OnLongTitleChanged()
    End Sub
    Partial Private Sub OnOrderIndexChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIndexChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentId", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property ParentId() As System.Nullable(Of Integer)
		Get
			Return Me._ParentId
		End Get
		Set
			If (Me._ParentId.Equals(value) = false) Then
				If Me._Category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnParentIdChanging(value)
				Me.SendPropertyChanging
				Me._ParentId = value
				Me.SendPropertyChanged("ParentId")
				Me.OnParentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FriendlyUrl", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property FriendlyUrl() As String
		Get
			Return Me._FriendlyUrl
		End Get
		Set
			If (String.Equals(Me._FriendlyUrl, value) = false) Then
				Me.OnFriendlyUrlChanging(value)
				Me.SendPropertyChanging
				Me._FriendlyUrl = value
				Me.SendPropertyChanged("FriendlyUrl")
				Me.OnFriendlyUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldId", DbType:="NVarChar(256)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property OldId() As String
		Get
			Return Me._OldId
		End Get
		Set
			If (String.Equals(Me._OldId, value) = false) Then
				Me.OnOldIdChanging(value)
				Me.SendPropertyChanging
				Me._OldId = value
				Me.SendPropertyChanged("OldId")
				Me.OnOldIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LongTitle", DbType:="NVarChar(255)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property LongTitle() As String
		Get
			Return Me._LongTitle
		End Get
		Set
			If (String.Equals(Me._LongTitle, value) = false) Then
				Me.OnLongTitleChanging(value)
				Me.SendPropertyChanging
				Me._LongTitle = value
				Me.SendPropertyChanged("LongTitle")
				Me.OnLongTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderIndex", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property OrderIndex() As Integer
		Get
			Return Me._OrderIndex
		End Get
		Set
			If ((Me._OrderIndex = value)  _
						= false) Then
				Me.OnOrderIndexChanging(value)
				Me.SendPropertyChanging
				Me._OrderIndex = value
				Me.SendPropertyChanged("OrderIndex")
				Me.OnOrderIndexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_ArticleCategoryMapping", Storage:="_ArticleCategoryMappings", ThisKey:="Id", OtherKey:="CategoryId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8, EmitDefaultValue:=false)>  _
	Public Property ArticleCategoryMappings() As EntitySet(Of ArticleCategoryMapping)
		Get
			If (Me.serializing  _
						AndAlso (Me._ArticleCategoryMappings.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ArticleCategoryMappings
		End Get
		Set
			Me._ArticleCategoryMappings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Category", Storage:="_Category", ThisKey:="ParentId", OtherKey:="Id", IsForeignKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9, EmitDefaultValue:=false)>  _
	Public Property Category() As Category
		Get
			If (Me.serializing  _
						AndAlso (Me._Category.HasLoadedOrAssignedValue = false)) Then
				Return Nothing
			End If
			Return Me._Category.Entity
		End Get
		Set
			If (Object.Equals(Me._Category.Entity, value) = false) Then
				Me.SendPropertyChanging
				Me._Category.Entity = value
				Me.SendPropertyChanged("Category")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ArticleCategoryMappings(ByVal entity As ArticleCategoryMapping)
		Me.SendPropertyChanging
		entity.Category = Me
	End Sub
	
	Private Sub detach_ArticleCategoryMappings(ByVal entity As ArticleCategoryMapping)
		Me.SendPropertyChanging
		entity.Category = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ArticleCategoryMappings = New EntitySet(Of ArticleCategoryMapping)(AddressOf Me.attach_ArticleCategoryMappings, AddressOf Me.detach_ArticleCategoryMappings)
		Me._Category = CType(Nothing, EntityRef(Of Category))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class
